{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","state","data","date","amount","startDate","Date","localStorage","getItem","dataString","JSON","stringify","setItem","this","setState","map","day","index","key","inputDate","document","getElementById","inputNumber","dtf","Intl","DateTimeFormat","year","month","push","format","valueAsDate","valueAsNumber","file","fr","FileReader","readAsText","onload","e","days","target","result","split","forEach","item","length","indexOf","values","parseFloat","resultString","months","yearList","dates","yearAmount","monthList","monthAmount","parseInt","console","log","element","createElement","setAttribute","encodeURIComponent","toLocaleDateString","style","display","body","appendChild","click","removeChild","className","htmlFor","type","id","name","accept","onChange","handleUpload","files","placeholder","Button","variant","onClick","handleInput","Table","striped","bordered","hover","renderTableData","handleDownload","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2RA8JeA,G,wDAtJd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,KAAM,CACL,CAAEC,KAAM,aAAcC,OAAQ,GAC9B,CAAED,KAAM,aAAcC,OAAQ,IAE/BC,UAAW,IAAIC,MAPE,E,gEAYlB,IAAIJ,EAAO,CACV,CAAEC,KAAM,aAAcC,OAAQ,MAC9B,CAAED,KAAM,aAAcC,OAAQ,OAE/B,GAAoC,OAAhCG,aAAaC,QAAQ,OAAiB,CAEzC,IAAIC,EAAaC,KAAKC,UAAUT,GAChCK,aAAaK,QAAQ,MAAOH,GAE7BI,KAAKC,SAAS,CAAEZ,KAAMA,M,wCAItB,OAAOW,KAAKZ,MAAMC,KAAKa,KAAI,SAACC,EAAKC,GAAW,IACnCd,EAAiBa,EAAjBb,KAAMC,EAAWY,EAAXZ,OACd,OACC,wBAAIc,IAAKf,GACR,4BAAKA,GACL,4BAAKC,S,oCAOR,IAAIF,EAAOW,KAAKZ,MAAMC,KAClBiB,EAAYC,SAASC,eAAe,QACpCC,EAAcF,SAASC,eAAe,UACpCE,EAAM,IAAIC,KAAKC,eAAe,QAAS,CAAEC,KAAM,UAAWC,MAAO,UAAWX,IAAK,YACvFd,EAAK0B,KAAK,CAAEzB,KAAMoB,EAAIM,OAAOV,EAAUW,aAAc1B,OAAQkB,EAAYS,gBACzElB,KAAKC,SAAS,CAAEZ,KAAMA,M,mCAGV8B,GAAa,IAAD,OACpBC,EAAK,IAAIC,WACbD,EAAGE,WAAWH,EAAM,SAEpBC,EAAGG,OAAS,SAAAC,GAEX,IAAIC,EADQD,EAAEE,OAAOC,OACAC,MAAM,MACvBvC,EAAO,GACXoC,EAAKI,SAAQ,SAAAC,GACZ,GAAa,KAATA,GAAeA,EAAKC,OAAS,IAA4B,IAAvBD,EAAKE,QAAQ,KAAa,CAC/D,IAAIC,EAASH,EAAKF,MAAM,KACxBvC,EAAK0B,KAAK,CAAEzB,KAAM2C,EAAO,GAAI1C,OAAQ2C,WAAWD,EAAO,UAGzD,EAAKhC,SAAS,CAAEZ,KAAMA,O,uCAKvB,IAAI8C,EAAe,eACf9C,EAAOW,KAAKZ,MAAMC,KAClB+C,EAAS,CAAC,SAAU,UAAW,UAAQ,QAAS,MAAO,OAC1D,OAAQ,SAAU,YAAa,UAAW,WAAY,YACnDC,EAAW,GACfhD,EAAKwC,SAAQ,SAAAC,GACZ,IAAIQ,EAAQR,EAAKxC,KAAKsC,MAAM,MAEQ,IAAhCS,EAASL,QAAQM,EAAM,KAC1BD,EAAStB,KAAKuB,EAAM,OAGtBD,EAASR,SAAQ,SAAAhB,GAChBsB,GAAgB,KAAOtB,EAAO,MAC9B,IAAI0B,EAAa,EACbC,EAAY,GAChBnD,EAAKwC,SAAQ,SAAAC,GACZ,IAAIQ,EAAQR,EAAKxC,KAAKsC,MAAM,KACxBU,EAAM,IAAMzB,IAAyC,IAAjC2B,EAAUR,QAAQM,EAAM,KAC/CE,EAAUzB,KAAKuB,EAAM,OAIvBE,EAAUX,SAAQ,SAAAf,GACjB,IAAI2B,EAAc,EAClBpD,EAAKwC,SAAQ,SAAAC,GACZ,IAAIQ,EAAQR,EAAKxC,KAAKsC,MAAM,KACxBU,EAAM,IAAMzB,GAAQyB,EAAM,IAAMxB,IACnC2B,GAAeP,WAAWJ,EAAKvC,YAGjC4C,GAAgB,OAASC,EAAOM,SAAS5B,GAAS,GAAK,KAAO2B,EAAc,KAC5EF,GAAcE,KAEfN,GAAgB,aAAeI,EAAa,QAE7CI,QAAQC,IAAIT,GACZ,IAAIU,EAAUtC,SAASuC,cAAc,KACrCD,EAAQE,aAAa,OAAQ,+BAAiCC,mBAAmBb,IACjFU,EAAQE,aAAa,WAAY,cAAe,IAAItD,MAAOwD,qBAAqB,QAChFJ,EAAQK,MAAMC,QAAU,OACxB5C,SAAS6C,KAAKC,YAAYR,GAC1BA,EAAQS,QACR/C,SAAS6C,KAAKG,YAAYV,K,+BAGjB,IAAD,OACR,OACC,yBAAKW,UAAU,OACd,6BACC,6BACC,2BAAOC,QAAQ,aAAf,sBACA,6BACA,2BAAOC,KAAK,OAAOC,GAAG,YAAYC,KAAK,YAAYC,OAAO,OAAOC,SAAU,SAAAtC,GAAC,OAAI,EAAKuC,aAAavC,EAAEE,OAAOsC,MAAM,QAElH,6BACA,6BACC,8BACC,2BAAON,KAAK,SAASC,GAAG,SAASC,KAAK,SAASK,YAAY,cAC3D,2BAAOP,KAAK,OAAOC,GAAG,SACtB,kBAACO,EAAA,EAAD,CAAQC,QAAQ,OAAOC,QAAS,kBAAM,EAAKC,gBAA3C,uBAGF,6BACA,6BACC,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACN,QAAQ,QACrC,+BACC,4BACC,qCACA,2CAGF,+BACEnE,KAAK0E,qBAIT,6BACC,kBAACR,EAAA,EAAD,CAAQC,QAAQ,OAAOC,QAAS,kBAAM,EAAKO,mBAA3C,qB,GAhJYC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7E,SAASC,eAAe,SDgIpB,kBAAmB6E,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.b733ee06.chunk.js","sourcesContent":["import React, { Component, Props, ReactComponentElement } from 'react';\nimport Table from 'react-bootstrap/Table'\nimport Button from 'react-bootstrap/Button'\nimport './App.css';\n\n\nclass App extends Component<{}, any> {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdata: [\n\t\t\t\t{ date: \"02/02/2020\", amount: 1 },\n\t\t\t\t{ date: \"03/02/2020\", amount: 2 }\n\t\t\t],\n\t\t\tstartDate: new Date()\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tlet data = [\n\t\t\t{ date: \"2020/02/02\", amount: 50.5 },\n\t\t\t{ date: \"2020/02/03\", amount: 50.5 }\n\t\t]\n\t\tif (localStorage.getItem(\"csv\") === null) {\n\n\t\t\tlet dataString = JSON.stringify(data)\n\t\t\tlocalStorage.setItem(\"csv\", dataString)\n\t\t}\n\t\tthis.setState({ data: data })\n\t}\n\n\trenderTableData() {\n\t\treturn this.state.data.map((day, index) => {\n\t\t\tconst { date, amount } = day;\n\t\t\treturn (\n\t\t\t\t<tr key={date}>\n\t\t\t\t\t<td>{date}</td>\n\t\t\t\t\t<td>{amount}</td>\n\t\t\t\t</tr>\n\t\t\t)\n\t\t})\n\t}\n\n\thandleInput() {\n\t\tlet data = this.state.data;\n\t\tlet inputDate = document.getElementById(\"date\") as HTMLInputElement;\n\t\tlet inputNumber = document.getElementById(\"number\") as HTMLInputElement;\n\t\tconst dtf = new Intl.DateTimeFormat(\"eu-ES\", { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" });\n\t\tdata.push({ date: dtf.format(inputDate.valueAsDate), amount: inputNumber.valueAsNumber });\n\t\tthis.setState({ data: data });\n\t}\n\n\thandleUpload(file: File) {\n\t\tlet fr = new FileReader();\n\t\tfr.readAsText(file, \"UTF-8\");\n\t\tlet csvString: string;\n\t\tfr.onload = e => {\n\t\t\tcsvString = e.target.result as string;\n\t\t\tlet days = csvString.split(\"\\n\");\n\t\t\tlet data = [];\n\t\t\tdays.forEach(item => {\n\t\t\t\tif (item !== \"\" && item.length > 0 && item.indexOf(\";\") !== -1) {\n\t\t\t\t\tlet values = item.split(\";\");\n\t\t\t\t\tdata.push({ date: values[0], amount: parseFloat(values[1]) })\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.setState({ data: data })\n\t\t}\n\t}\n\n\thandleDownload() {\n\t\tlet resultString = \"AUSWERTUNG\\n\";\n\t\tlet data = this.state.data;\n\t\tlet months = [\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\",\n\t\t\t\"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\"];\n\t\tlet yearList = [];\n\t\tdata.forEach(item => {\n\t\t\tlet dates = item.date.split(\"/\");\n\t\t\t// check the year\n\t\t\tif (yearList.indexOf(dates[0]) === -1) {\n\t\t\t\tyearList.push(dates[0])\n\t\t\t}\n\t\t});\n\t\tyearList.forEach(year => {\n\t\t\tresultString += \"\\t\" + year + \":\\n\"\n\t\t\tlet yearAmount = 0.0;\n\t\t\tlet monthList = [];\n\t\t\tdata.forEach(item => {\n\t\t\t\tlet dates = item.date.split(\"/\");\n\t\t\t\tif (dates[0] == year && monthList.indexOf(dates[1]) === -1) {\n\t\t\t\t\tmonthList.push(dates[1])\n\t\t\t\t}\n\t\t\t});\n\t\t\t// now for each month add day amounts\n\t\t\tmonthList.forEach(month => {\n\t\t\t\tlet monthAmount = 0.0;\n\t\t\t\tdata.forEach(item => {\n\t\t\t\t\tlet dates = item.date.split(\"/\");\n\t\t\t\t\tif (dates[0] == year && dates[1] == month) {\n\t\t\t\t\t\tmonthAmount += parseFloat(item.amount);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresultString += \"\\t\\t\" + months[parseInt(month) - 1] + \": \" + monthAmount + \"\\n\";\n\t\t\t\tyearAmount += monthAmount;\n\t\t\t});\n\t\t\tresultString += \"\\tGesamt: \" + yearAmount + \"\\n\";\n\t\t});\n\t\tconsole.log(resultString);\n\t\tlet element = document.createElement(\"a\");\n\t\telement.setAttribute(\"href\", \"data:text/csv;charset=utf-8,\" + encodeURIComponent(resultString));\n\t\telement.setAttribute(\"download\", \"Auswertung\" + new Date().toLocaleDateString()+\".csv\");\n\t\telement.style.display = 'none';\n\t\tdocument.body.appendChild(element);\n\t\telement.click();\n\t\tdocument.body.removeChild(element);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<label htmlFor=\"fileInput\">Datei Importieren?</label>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<input type=\"file\" id=\"fileInput\" name=\"fileInput\" accept=\".csv\" onChange={e => this.handleUpload(e.target.files[0])} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<br />\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<input type=\"number\" id=\"number\" name=\"number\" placeholder=\"Einnahmen\" />\n\t\t\t\t\t\t\t<input type=\"date\" id=\"date\" />\n\t\t\t\t\t\t\t<Button variant=\"dark\" onClick={() => this.handleInput()} >Tag hinzufügen</Button>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<br />\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Table striped bordered hover variant=\"dark\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>Datum</th>\n\t\t\t\t\t\t\t\t\t<th>Einnahmen</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{this.renderTableData()}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</Table>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Button variant=\"dark\" onClick={() => this.handleDownload()} >Auswertung</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}